Prefix(:=<http://www.skosknowledge.com/ontologies/skos_knowledge.owl#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(term:=<http://purl.org/dc/terms/>)


Ontology(<http://www.skosknowledge.com/ontologies/skos_knowledge.owl>
Annotation(term:description "An RDF vocabulary for describing the basic structure and content of concept schemes such as thesauri, classification schemes, subject heading lists, taxonomies, 'folksonomies', other types of controlled vocabulary, and also concept schemes embedded in glossaries and terminologies."@en)
Annotation(term:title "SKOS Vocabulary"@en)
Annotation(rdfs:seeAlso <http://www.w3.org/TR/skos-reference>)

Declaration(Class(:ArithmeticOperator))
Declaration(Class(:CProgram))
Declaration(Class(:Collection))
Declaration(Class(:Comment))
Declaration(Class(:Computer))
Declaration(Class(:Concept))
Declaration(Class(:ConceptAddNewConcept))
Declaration(Class(:ConceptAlgorithm))
Declaration(Class(:ConceptArithmetic_Operator))
Declaration(Class(:ConceptAssignment))
Declaration(Class(:ConceptC_Program))
Declaration(Class(:ConceptC_Programming_Language))
Declaration(Class(:ConceptCode))
Declaration(Class(:ConceptComment))
Declaration(Class(:ConceptCompilation))
Declaration(Class(:ConceptComputer))
Declaration(Class(:ConceptConstant))
Declaration(Class(:ConceptDeclaration))
Declaration(Class(:ConceptDirective))
Declaration(Class(:ConceptDouble))
Declaration(Class(:ConceptExpression))
Declaration(Class(:ConceptFloat))
Declaration(Class(:ConceptFunction))
Declaration(Class(:ConceptFunction_Call))
Declaration(Class(:ConceptFunction_Heading))
Declaration(Class(:ConceptIdentifier))
Declaration(Class(:ConceptInitialisation))
Declaration(Class(:ConceptInput_Output))
Declaration(Class(:ConceptInstruction))
Declaration(Class(:ConceptInteger))
Declaration(Class(:ConceptLifetime))
Declaration(Class(:ConceptMachine_Code))
Declaration(Class(:ConceptMacro))
Declaration(Class(:ConceptMemory))
Declaration(Class(:ConceptNewConcept2))
Declaration(Class(:ConceptOperator))
Declaration(Class(:ConceptParameter))
Declaration(Class(:ConceptProcedure))
Declaration(Class(:ConceptProgram))
Declaration(Class(:ConceptProgramming))
Declaration(Class(:ConceptProgramming_Language))
Declaration(Class(:ConceptProgramming_Strategy))
Declaration(Class(:ConceptRelational_Operator))
Declaration(Class(:ConceptReturn_value))
Declaration(Class(:ConceptScope))
Declaration(Class(:ConceptSelection_Statement))
Declaration(Class(:ConceptStatement))
Declaration(Class(:ConceptTest))
Declaration(Class(:ConceptType))
Declaration(Class(:ConceptVariable))
Declaration(Class(:Conceptae))
Declaration(Class(:Conceptx))
Declaration(Class(:Constant))
Declaration(Class(:Directive))
Declaration(Class(:Function))
Declaration(Class(:FunctionLifetime))
Declaration(Class(:FunctionParameter))
Declaration(Class(:FunctionScope))
Declaration(Class(:FunctionType))
Declaration(Class(:IO))
Declaration(Class(:Operator))
Declaration(Class(:OrderedCollection))
Declaration(Class(:Program))
Declaration(Class(:Programming))
Declaration(Class(:ProgrammingLanguage))
Declaration(Class(:ProgrammingStrategy))
Declaration(Class(:RelationalOperator))
Declaration(Class(:SchemeDouble))
Declaration(Class(:SchemeFloat))
Declaration(Class(:SchemeInteger))
Declaration(Class(:Schemes))
Declaration(Class(:SchemesType))
Declaration(Class(:SelectionStatement))
Declaration(Class(:Statement))
Declaration(Class(:Variable))
Declaration(Class(:VariableAssignment))
Declaration(Class(:VariableDeclaration))
Declaration(Class(:VariableInitialisation))
Declaration(Class(:VariableMemory))
Declaration(Class(:VariableType))
Declaration(Class(:VariableValue))
Declaration(Class(<http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1511>))
Declaration(Class(rdf:List))
Declaration(ObjectProperty(:broadMatch))
Declaration(ObjectProperty(:broader))
Declaration(ObjectProperty(:broaderTransitive))
Declaration(ObjectProperty(:closeMatch))
Declaration(ObjectProperty(:exactMatch))
Declaration(ObjectProperty(:hasTopConcept))
Declaration(ObjectProperty(:inScheme))
Declaration(ObjectProperty(:mappingRelation))
Declaration(ObjectProperty(:member))
Declaration(ObjectProperty(:memberList))
Declaration(ObjectProperty(:narrowMatch))
Declaration(ObjectProperty(:narrower))
Declaration(ObjectProperty(:narrowerTransitive))
Declaration(ObjectProperty(:related))
Declaration(ObjectProperty(:relatedMatch))
Declaration(ObjectProperty(:semanticRelation))
Declaration(ObjectProperty(:testRelation))
Declaration(ObjectProperty(:topConceptOf))
Declaration(DataProperty(:notation))
Declaration(NamedIndividual(<http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1>))
Declaration(NamedIndividual(<http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2>))
Declaration(AnnotationProperty(term:description))
Declaration(AnnotationProperty(term:title))
Declaration(AnnotationProperty(:LOId))
Declaration(AnnotationProperty(:altLabel))
Declaration(AnnotationProperty(:changeNote))
Declaration(AnnotationProperty(:csoConcept))
Declaration(AnnotationProperty(:definition))
Declaration(AnnotationProperty(:documentId))
Declaration(AnnotationProperty(:editorialNote))
Declaration(AnnotationProperty(:example))
Declaration(AnnotationProperty(:hiddenLabel))
Declaration(AnnotationProperty(:historyNote))
Declaration(AnnotationProperty(:note))
Declaration(AnnotationProperty(:prefLabel))
Declaration(AnnotationProperty(:requires))
Declaration(AnnotationProperty(:scopeNote))
Declaration(AnnotationProperty(:relation:broadmatch))
Declaration(AnnotationProperty(:relation:closematch))
Declaration(AnnotationProperty(:relation:exactmatch))
Declaration(AnnotationProperty(:relation:narrowmatch))
############################
#   Annotation Properties
############################

# Annotation Property: :LOId (:LOId)

SubAnnotationPropertyOf(:LOId rdfs:comment)

# Annotation Property: :altLabel (alternative label)

AnnotationAssertion(:definition :altLabel "An alternative lexical label for a resource."@en)
AnnotationAssertion(:example :altLabel "Acronyms, abbreviations, spelling variants, and irregular plural/singular forms may be included among the alternative labels for a concept. Mis-spelled terms are normally included as hidden labels (see skos:hiddenLabel)."@en)
AnnotationAssertion(rdfs:comment :altLabel "The range of skos:altLabel is the class of RDF plain literals."@en)
AnnotationAssertion(rdfs:comment :altLabel "skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties."@en)
AnnotationAssertion(rdfs:isDefinedBy :altLabel <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :altLabel "alternative label"@en)
SubAnnotationPropertyOf(:altLabel rdfs:label)

# Annotation Property: :changeNote (change note)

AnnotationAssertion(:definition :changeNote "A note about a modification to a concept."@en)
AnnotationAssertion(rdfs:isDefinedBy :changeNote <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :changeNote "change note"@en)
SubAnnotationPropertyOf(:changeNote :note)

# Annotation Property: :csoConcept (:csoConcept)

SubAnnotationPropertyOf(:csoConcept rdfs:comment)

# Annotation Property: :definition (definition)

AnnotationAssertion(:definition :definition "A statement or formal explanation of the meaning of a concept."@en)
AnnotationAssertion(rdfs:isDefinedBy :definition <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :definition "definition"@en)
SubAnnotationPropertyOf(:definition :note)

# Annotation Property: :documentId (:documentId)

SubAnnotationPropertyOf(:documentId rdfs:comment)

# Annotation Property: :editorialNote (editorial note)

AnnotationAssertion(:definition :editorialNote "A note for an editor, translator or maintainer of the vocabulary."@en)
AnnotationAssertion(rdfs:isDefinedBy :editorialNote <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :editorialNote "editorial note"@en)
SubAnnotationPropertyOf(:editorialNote :note)

# Annotation Property: :example (example)

AnnotationAssertion(:definition :example "An example of the use of a concept."@en)
AnnotationAssertion(rdfs:isDefinedBy :example <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :example "example"@en)
SubAnnotationPropertyOf(:example :note)

# Annotation Property: :hiddenLabel (hidden label)

AnnotationAssertion(:definition :hiddenLabel "A lexical label for a resource that should be hidden when generating visual displays of the resource, but should still be accessible to free text search operations."@en)
AnnotationAssertion(rdfs:comment :hiddenLabel "The range of skos:hiddenLabel is the class of RDF plain literals."@en)
AnnotationAssertion(rdfs:comment :hiddenLabel "skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties."@en)
AnnotationAssertion(rdfs:isDefinedBy :hiddenLabel <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :hiddenLabel "hidden label"@en)
SubAnnotationPropertyOf(:hiddenLabel rdfs:label)

# Annotation Property: :historyNote (history note)

AnnotationAssertion(:definition :historyNote "A note about the past state/use/meaning of a concept."@en)
AnnotationAssertion(rdfs:isDefinedBy :historyNote <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :historyNote "history note"@en)
SubAnnotationPropertyOf(:historyNote :note)

# Annotation Property: :note (note)

AnnotationAssertion(:definition :note "A general note, for any purpose."@en)
AnnotationAssertion(:scopeNote :note "This property may be used directly, or as a super-property for more specific note types."@en)
AnnotationAssertion(rdfs:isDefinedBy :note <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :note "note"@en)

# Annotation Property: :prefLabel (preferred label)

AnnotationAssertion(:definition :prefLabel "The preferred lexical label for a resource, in a given language."@en)
AnnotationAssertion(rdfs:comment :prefLabel "A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag."@en)
AnnotationAssertion(rdfs:comment :prefLabel "The range of skos:prefLabel is the class of RDF plain literals."@en)
AnnotationAssertion(rdfs:comment :prefLabel "skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise
      disjoint properties."@en)
AnnotationAssertion(rdfs:isDefinedBy :prefLabel <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :prefLabel "preferred label"@en)
SubAnnotationPropertyOf(:prefLabel rdfs:label)

# Annotation Property: :scopeNote (scope note)

AnnotationAssertion(:definition :scopeNote "A note that helps to clarify the meaning and/or the use of a concept."@en)
AnnotationAssertion(rdfs:isDefinedBy :scopeNote <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :scopeNote "scope note"@en)
SubAnnotationPropertyOf(:scopeNote :note)


############################
#   Object Properties
############################

# Object Property: :broadMatch (has broader match)

AnnotationAssertion(:definition :broadMatch "skos:broadMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes."@en)
AnnotationAssertion(rdfs:isDefinedBy :broadMatch <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :broadMatch "has broader match"@en)
SubObjectPropertyOf(:broadMatch :broader)
SubObjectPropertyOf(:broadMatch :mappingRelation)
InverseObjectProperties(:broadMatch :narrowMatch)

# Object Property: :broader (has broader)

AnnotationAssertion(:definition :broader "Relates a concept to a concept that is more general in meaning."@en)
AnnotationAssertion(:scopeNote :broader "By convention, skos:broader is only used to assert an immediate (i.e. direct) hierarchical link between two conceptual resources."@en)
AnnotationAssertion(rdfs:comment :broader "Broader concepts are typically rendered as parents in a concept hierarchy (tree)."@en)
AnnotationAssertion(rdfs:isDefinedBy :broader <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :broader "has broader"@en)
SubObjectPropertyOf(:broader :broaderTransitive)
InverseObjectProperties(:broader :narrower)

# Object Property: :broaderTransitive (has broader transitive)

AnnotationAssertion(:definition :broaderTransitive "skos:broaderTransitive is a transitive superproperty of skos:broader.")
AnnotationAssertion(:scopeNote :broaderTransitive "By convention, skos:broaderTransitive is not used to make assertions. Rather, the properties can be used to draw inferences about the transitive closure of the hierarchical relation, which is useful e.g. when implementing a simple query expansion algorithm in a search application."@en)
AnnotationAssertion(rdfs:isDefinedBy :broaderTransitive <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :broaderTransitive "has broader transitive"@en)
SubObjectPropertyOf(:broaderTransitive :semanticRelation)
InverseObjectProperties(:broaderTransitive :narrowerTransitive)
TransitiveObjectProperty(:broaderTransitive)

# Object Property: :closeMatch (has close match)

AnnotationAssertion(:definition :closeMatch "skos:closeMatch is used to link two concepts that are sufficiently similar that they can be used interchangeably in some information retrieval applications. In order to avoid the possibility of \"compound errors\" when combining mappings across more than two concept schemes, skos:closeMatch is not declared to be a transitive property."@en)
AnnotationAssertion(rdfs:isDefinedBy :closeMatch <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :closeMatch "has close match"@en)
SubObjectPropertyOf(:closeMatch :mappingRelation)
SymmetricObjectProperty(:closeMatch)

# Object Property: :exactMatch (has exact match)

AnnotationAssertion(:definition :exactMatch "skos:exactMatch is used to link two concepts, indicating a high degree of confidence that the concepts can be used interchangeably across a wide range of information retrieval applications. skos:exactMatch is a transitive property, and is a sub-property of skos:closeMatch."@en)
AnnotationAssertion(rdfs:comment :exactMatch "skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch."@en)
AnnotationAssertion(rdfs:isDefinedBy :exactMatch <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :exactMatch "has exact match"@en)
SubObjectPropertyOf(:exactMatch :closeMatch)
SymmetricObjectProperty(:exactMatch)
TransitiveObjectProperty(:exactMatch)

# Object Property: :hasTopConcept (has top concept)

AnnotationAssertion(:definition :hasTopConcept "Relates, by convention, a concept scheme to a concept which is topmost in the broader/narrower concept hierarchies for that scheme, providing an entry point to these hierarchies."@en)
AnnotationAssertion(rdfs:isDefinedBy :hasTopConcept <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :hasTopConcept "has top concept"@en)
InverseObjectProperties(:hasTopConcept :topConceptOf)
ObjectPropertyDomain(:hasTopConcept :Schemes)
ObjectPropertyRange(:hasTopConcept :Concept)

# Object Property: :inScheme (is in scheme)

AnnotationAssertion(:definition :inScheme "Relates a resource (for example a concept) to a concept scheme in which it is included."@en)
AnnotationAssertion(:scopeNote :inScheme "A concept may be a member of more than one concept scheme."@en)
AnnotationAssertion(rdfs:isDefinedBy :inScheme <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :inScheme "is in scheme"@en)
ObjectPropertyRange(:inScheme :Schemes)

# Object Property: :mappingRelation (is in mapping relation with)

AnnotationAssertion(:definition :mappingRelation "Relates two concepts coming, by convention, from different schemes, and that have comparable meanings"@en)
AnnotationAssertion(rdfs:comment :mappingRelation "These concept mapping relations mirror semantic relations, and the data model defined below is similar (with the exception of skos:exactMatch) to the data model defined for semantic relations. A distinct vocabulary is provided for concept mapping relations, to provide a convenient way to differentiate links within a concept scheme from links between concept schemes. However, this pattern of usage is not a formal requirement of the SKOS data model, and relies on informal definitions of best practice."@en)
AnnotationAssertion(rdfs:isDefinedBy :mappingRelation <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :mappingRelation "is in mapping relation with"@en)
SubObjectPropertyOf(:mappingRelation :semanticRelation)

# Object Property: :member (has member)

AnnotationAssertion(:definition :member "Relates a collection to one of its members."@en)
AnnotationAssertion(rdfs:isDefinedBy :member <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :member "has member"@en)
ObjectPropertyDomain(:member :Collection)
ObjectPropertyRange(:member ObjectUnionOf(:Collection :Concept))

# Object Property: :memberList (has member list)

AnnotationAssertion(:definition :memberList "Relates an ordered collection to the RDF list containing its members."@en)
AnnotationAssertion(rdfs:comment :memberList "For any resource, every item in the list given as the value of the
      skos:memberList property is also a value of the skos:member property."@en)
AnnotationAssertion(rdfs:isDefinedBy :memberList <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :memberList "has member list"@en)
FunctionalObjectProperty(:memberList)
ObjectPropertyDomain(:memberList :OrderedCollection)
ObjectPropertyRange(:memberList rdf:List)

# Object Property: :narrowMatch (has narrower match)

AnnotationAssertion(:definition :narrowMatch "skos:narrowMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes."@en)
AnnotationAssertion(rdfs:isDefinedBy :narrowMatch <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :narrowMatch "has narrower match"@en)
SubObjectPropertyOf(:narrowMatch :mappingRelation)
SubObjectPropertyOf(:narrowMatch :narrower)

# Object Property: :narrower (has narrower)

AnnotationAssertion(:definition :narrower "Relates a concept to a concept that is more specific in meaning."@en)
AnnotationAssertion(:scopeNote :narrower "By convention, skos:broader is only used to assert an immediate (i.e. direct) hierarchical link between two conceptual resources."@en)
AnnotationAssertion(rdfs:comment :narrower "Narrower concepts are typically rendered as children in a concept hierarchy (tree)."@en)
AnnotationAssertion(rdfs:isDefinedBy :narrower <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :narrower "has narrower"@en)
SubObjectPropertyOf(:narrower :narrowerTransitive)

# Object Property: :narrowerTransitive (has narrower transitive)

AnnotationAssertion(:definition :narrowerTransitive "skos:narrowerTransitive is a transitive superproperty of skos:narrower.")
AnnotationAssertion(:scopeNote :narrowerTransitive "By convention, skos:narrowerTransitive is not used to make assertions. Rather, the properties can be used to draw inferences about the transitive closure of the hierarchical relation, which is useful e.g. when implementing a simple query expansion algorithm in a search application."@en)
AnnotationAssertion(rdfs:isDefinedBy :narrowerTransitive <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :narrowerTransitive "has narrower transitive"@en)
SubObjectPropertyOf(:narrowerTransitive :semanticRelation)
TransitiveObjectProperty(:narrowerTransitive)

# Object Property: :related (has related)

AnnotationAssertion(:definition :related "Relates a concept to a concept with which there is an associative semantic relationship."@en)
AnnotationAssertion(rdfs:comment :related "skos:related is disjoint with skos:broaderTransitive"@en)
AnnotationAssertion(rdfs:isDefinedBy :related <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :related "has related"@en)
SubObjectPropertyOf(:related :semanticRelation)
SymmetricObjectProperty(:related)

# Object Property: :relatedMatch (has related match)

AnnotationAssertion(:definition :relatedMatch "skos:relatedMatch is used to state an associative mapping link between two conceptual resources in different concept schemes."@en)
AnnotationAssertion(rdfs:isDefinedBy :relatedMatch <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :relatedMatch "has related match"@en)
SubObjectPropertyOf(:relatedMatch :mappingRelation)
SubObjectPropertyOf(:relatedMatch :related)
SymmetricObjectProperty(:relatedMatch)

# Object Property: :semanticRelation (is in semantic relation with)

AnnotationAssertion(:definition :semanticRelation "Links a concept to a concept related by meaning."@en)
AnnotationAssertion(:scopeNote :semanticRelation "This property should not be used directly, but as a super-property for all properties denoting a relationship of meaning between concepts."@en)
AnnotationAssertion(rdfs:isDefinedBy :semanticRelation <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :semanticRelation "is in semantic relation with"@en)
ObjectPropertyDomain(:semanticRelation :Concept)
ObjectPropertyRange(:semanticRelation :Concept)

# Object Property: :topConceptOf (is top concept in scheme)

AnnotationAssertion(:definition :topConceptOf "Relates a concept to the concept scheme that it is a top level concept of."@en)
AnnotationAssertion(rdfs:isDefinedBy :topConceptOf <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :topConceptOf "is top concept in scheme"@en)
SubObjectPropertyOf(:topConceptOf :inScheme)
ObjectPropertyDomain(:topConceptOf :Concept)
ObjectPropertyRange(:topConceptOf :Schemes)


############################
#   Data Properties
############################

# Data Property: :notation (notation)

AnnotationAssertion(:definition :notation "A notation, also known as classification code, is a string of characters such as \"T58.5\" or \"303.4833\" used to uniquely identify a concept within the scope of a given concept scheme."@en)
AnnotationAssertion(:scopeNote :notation "By convention, skos:notation is used with a typed literal in the object position of the triple."@en)
AnnotationAssertion(rdfs:isDefinedBy :notation <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :notation "notation"@en)



############################
#   Classes
############################

# Class: :ArithmeticOperator (:ArithmeticOperator)

SubClassOf(:ArithmeticOperator :Operator)
SubClassOf(:ArithmeticOperator ObjectSomeValuesFrom(:member :ConceptArithmetic_Operator))

# Class: :CProgram (:CProgram)

SubClassOf(:CProgram :ProgrammingLanguage)
SubClassOf(:CProgram ObjectSomeValuesFrom(:member :ConceptC_Program))

# Class: :Collection (Collection)

AnnotationAssertion(:definition :Collection "A meaningful collection of concepts."@en)
AnnotationAssertion(:scopeNote :Collection "Labelled collections can be used where you would like a set of concepts to be displayed under a 'node label' in the hierarchy."@en)
AnnotationAssertion(rdfs:isDefinedBy :Collection <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :Collection "Collection"@en)

# Class: :Comment (:Comment)

SubClassOf(:Comment :Program)
SubClassOf(:Comment ObjectSomeValuesFrom(:member :ConceptComment))

# Class: :Computer (:Computer)

SubClassOf(:Computer <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1511>)
SubClassOf(:Computer ObjectSomeValuesFrom(:member :ConceptComputer))

# Class: :Concept (Concept)

AnnotationAssertion(:definition :Concept "An idea or notion; a unit of thought."@en)
AnnotationAssertion(rdfs:isDefinedBy :Concept <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :Concept "Concept"@en)

# Class: :ConceptAddNewConcept (:ConceptAddNewConcept)

AnnotationAssertion(:requires :ConceptAddNewConcept "C_Program"^^xsd:string)
SubClassOf(:ConceptAddNewConcept :Concept)

# Class: :ConceptAlgorithm (:ConceptAlgorithm)

SubClassOf(:ConceptAlgorithm :Concept)

# Class: :ConceptArithmetic_Operator (:ConceptArithmetic_Operator)

AnnotationAssertion(:requires :ConceptArithmetic_Operator "MathArithmetic,TestDependency")
SubClassOf(:ConceptArithmetic_Operator :Concept)
SubClassOf(:ConceptArithmetic_Operator ObjectSomeValuesFrom(:broader :ConceptOperator))

# Class: :ConceptAssignment (:ConceptAssignment)

SubClassOf(:ConceptAssignment :Concept)
SubClassOf(:ConceptAssignment ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :ConceptC_Program (:ConceptC_Program)

AnnotationAssertion(:altLabel :ConceptC_Program "C"@en)
AnnotationAssertion(:hiddenLabel :ConceptC_Program "test hidden"@en)
AnnotationAssertion(rdfs:comment :ConceptC_Program "I LOVE COMMENTS IN MY PROGRAMS!"@en)
AnnotationAssertion(rdfs:comment :ConceptC_Program "Test 2"@en)
SubClassOf(:ConceptC_Program :Concept)
SubClassOf(:ConceptC_Program ObjectSomeValuesFrom(:related :ConceptProgram))

# Class: :ConceptC_Programming_Language (:ConceptC_Programming_Language)

SubClassOf(:ConceptC_Programming_Language :Concept)
SubClassOf(:ConceptC_Programming_Language ObjectSomeValuesFrom(:broader :ConceptC_Program))

# Class: :ConceptCode (:ConceptCode)

SubClassOf(:ConceptCode :Concept)
SubClassOf(:ConceptCode ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :ConceptComment (:ConceptComment)

SubClassOf(:ConceptComment :Concept)
SubClassOf(:ConceptComment ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :ConceptCompilation (:ConceptCompilation)

SubClassOf(:ConceptCompilation :Concept)
SubClassOf(:ConceptCompilation ObjectSomeValuesFrom(:broader :ConceptProgram))
SubClassOf(:ConceptCompilation ObjectSomeValuesFrom(:narrower :ConceptMachine_Code))

# Class: :ConceptComputer (:ConceptComputer)

SubClassOf(:ConceptComputer :Concept)
SubClassOf(:ConceptComputer ObjectSomeValuesFrom(:narrower :ConceptProgram))

# Class: :ConceptConstant (:ConceptConstant)

SubClassOf(:ConceptConstant :Concept)
SubClassOf(:ConceptConstant ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :ConceptDeclaration (:ConceptDeclaration)

SubClassOf(:ConceptDeclaration :Concept)
SubClassOf(:ConceptDeclaration ObjectSomeValuesFrom(:broader :ConceptVariable))

# Class: :ConceptDirective (:ConceptDirective)

SubClassOf(:ConceptDirective :Concept)
SubClassOf(:ConceptDirective ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :ConceptDouble (:ConceptDouble)

SubClassOf(:ConceptDouble :Concept)
SubClassOf(:ConceptDouble ObjectSomeValuesFrom(:broader :ConceptType))

# Class: :ConceptExpression (:ConceptExpression)

SubClassOf(:ConceptExpression :Concept)
SubClassOf(:ConceptExpression ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :ConceptFloat (:ConceptFloat)

SubClassOf(:ConceptFloat :Concept)
SubClassOf(:ConceptFloat ObjectSomeValuesFrom(:broader :ConceptType))

# Class: :ConceptFunction (:ConceptFunction)

SubClassOf(:ConceptFunction :Concept)
SubClassOf(:ConceptFunction ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :ConceptFunction_Call (:ConceptFunction_Call)

AnnotationAssertion(:requires :ConceptFunction_Call "Function")
SubClassOf(:ConceptFunction_Call :Concept)
SubClassOf(:ConceptFunction_Call ObjectSomeValuesFrom(:broader :ConceptFunction))

# Class: :ConceptFunction_Heading (:ConceptFunction_Heading)

AnnotationAssertion(:requires :ConceptFunction_Heading "Function")
SubClassOf(:ConceptFunction_Heading :Concept)
SubClassOf(:ConceptFunction_Heading ObjectSomeValuesFrom(:broader :ConceptFunction))

# Class: :ConceptIdentifier (:ConceptIdentifier)

SubClassOf(:ConceptIdentifier :Concept)
SubClassOf(:ConceptIdentifier ObjectSomeValuesFrom(:broader :ConceptVariable))

# Class: :ConceptInitialisation (:ConceptInitialisation)

SubClassOf(:ConceptInitialisation :Concept)
SubClassOf(:ConceptInitialisation ObjectSomeValuesFrom(:broader :ConceptVariable))

# Class: :ConceptInput_Output (:ConceptInput_Output)

SubClassOf(:ConceptInput_Output :Concept)
SubClassOf(:ConceptInput_Output ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :ConceptInstruction (:ConceptInstruction)

SubClassOf(:ConceptInstruction :Concept)
SubClassOf(:ConceptInstruction ObjectSomeValuesFrom(:related :ConceptMachine_Code))

# Class: :ConceptInteger (:ConceptInteger)

SubClassOf(:ConceptInteger :Concept)
SubClassOf(:ConceptInteger ObjectSomeValuesFrom(:broader :ConceptType))

# Class: :ConceptLifetime (:ConceptLifetime)

SubClassOf(:ConceptLifetime :Concept)
SubClassOf(:ConceptLifetime ObjectSomeValuesFrom(:broader :ConceptFunction))

# Class: :ConceptMachine_Code (:ConceptMachine_Code)

SubClassOf(:ConceptMachine_Code :Concept)
SubClassOf(:ConceptMachine_Code ObjectSomeValuesFrom(:related :ConceptInstruction))

# Class: :ConceptMacro (:ConceptMacro)

SubClassOf(:ConceptMacro :Concept)
SubClassOf(:ConceptMacro ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :ConceptMemory (:ConceptMemory)

SubClassOf(:ConceptMemory :Concept)
SubClassOf(:ConceptMemory ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :ConceptNewConcept2 (:ConceptNewConcept2)

AnnotationAssertion(:requires :ConceptNewConcept2 "Arithmetic_Operator,Computer"^^xsd:string)
SubClassOf(:ConceptNewConcept2 :Concept)

# Class: :ConceptOperator (:ConceptOperator)

AnnotationAssertion(:altLabel :ConceptOperator "operations")
SubClassOf(:ConceptOperator :Concept)
SubClassOf(:ConceptOperator ObjectSomeValuesFrom(:broader :ConceptProgram))
SubClassOf(:ConceptOperator ObjectSomeValuesFrom(:exactMatch :ConceptAddNewConcept))

# Class: :ConceptParameter (:ConceptParameter)

SubClassOf(:ConceptParameter :Concept)
SubClassOf(:ConceptParameter ObjectSomeValuesFrom(:broader :ConceptFunction))

# Class: :ConceptProcedure (:ConceptProcedure)

SubClassOf(:ConceptProcedure :Concept)
SubClassOf(:ConceptProcedure ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :ConceptProgram (:ConceptProgram)

SubClassOf(:ConceptProgram :Concept)
SubClassOf(:ConceptProgram ObjectSomeValuesFrom(:broaderTransitive :ConceptComputer))
SubClassOf(:ConceptProgram ObjectSomeValuesFrom(:narrower :ConceptAlgorithm))
SubClassOf(:ConceptProgram ObjectSomeValuesFrom(:narrower :ConceptInstruction))

# Class: :ConceptProgramming (:ConceptProgramming)

SubClassOf(:ConceptProgramming :Concept)
SubClassOf(:ConceptProgramming ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :ConceptProgramming_Language (:ConceptProgramming_Language)

SubClassOf(:ConceptProgramming_Language :Concept)
SubClassOf(:ConceptProgramming_Language ObjectSomeValuesFrom(:broader :ConceptProgramming))

# Class: :ConceptProgramming_Strategy (:ConceptProgramming_Strategy)

SubClassOf(:ConceptProgramming_Strategy :Concept)
SubClassOf(:ConceptProgramming_Strategy ObjectSomeValuesFrom(:broader :ConceptProgramming))

# Class: :ConceptRelational_Operator (:ConceptRelational_Operator)

SubClassOf(:ConceptRelational_Operator :Concept)
SubClassOf(:ConceptRelational_Operator ObjectSomeValuesFrom(:broader :ConceptOperator))

# Class: :ConceptReturn_value (:ConceptReturn_value)

SubClassOf(:ConceptReturn_value :Concept)
SubClassOf(:ConceptReturn_value ObjectSomeValuesFrom(:broader :ConceptFunction))

# Class: :ConceptScope (:ConceptScope)

SubClassOf(:ConceptScope :Concept)
SubClassOf(:ConceptScope ObjectSomeValuesFrom(:broader :ConceptFunction))

# Class: :ConceptSelection_Statement (:ConceptSelection_Statement)

AnnotationAssertion(:altLabel :ConceptSelection_Statement "Conditioned Statements")
SubClassOf(:ConceptSelection_Statement :Concept)
SubClassOf(:ConceptSelection_Statement ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :ConceptStatement (:ConceptStatement)

SubClassOf(:ConceptStatement :Concept)
SubClassOf(:ConceptStatement ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :ConceptTest (:ConceptTest)

SubClassOf(:ConceptTest :Concept)

# Class: :ConceptType (:ConceptType)

AnnotationAssertion(:altLabel :ConceptType "Datatype")
SubClassOf(:ConceptType :Concept)
SubClassOf(:ConceptType ObjectSomeValuesFrom(:broader :ConceptVariable))

# Class: :ConceptVariable (:ConceptVariable)

SubClassOf(:ConceptVariable :Concept)
SubClassOf(:ConceptVariable ObjectSomeValuesFrom(:broader :ConceptProgram))

# Class: :Conceptae (:Conceptae)

SubClassOf(:Conceptae :Concept)

# Class: :Conceptx (:Conceptx)

SubClassOf(:Conceptx :Concept)

# Class: :Constant (:Constant)

SubClassOf(:Constant :Program)
SubClassOf(:Constant ObjectSomeValuesFrom(:member :ConceptConstant))

# Class: :Directive (:Directive)

SubClassOf(:Directive :Program)
SubClassOf(:Directive ObjectSomeValuesFrom(:member :ConceptDirective))

# Class: :Function (:Function)

SubClassOf(:Function :Program)
SubClassOf(:Function ObjectSomeValuesFrom(:member :ConceptFunction))

# Class: :FunctionLifetime (:FunctionLifetime)

SubClassOf(:FunctionLifetime :Function)
SubClassOf(:FunctionLifetime ObjectSomeValuesFrom(:member :ConceptLifetime))

# Class: :FunctionParameter (:FunctionParameter)

SubClassOf(:FunctionParameter :Function)
SubClassOf(:FunctionParameter ObjectSomeValuesFrom(:member :ConceptParameter))

# Class: :FunctionScope (:FunctionScope)

SubClassOf(:FunctionScope :Function)
SubClassOf(:FunctionScope ObjectSomeValuesFrom(:member :ConceptScope))

# Class: :FunctionType (:FunctionType)

EquivalentClasses(:FunctionType :SchemesType)
SubClassOf(:FunctionType :Function)
SubClassOf(:FunctionType ObjectSomeValuesFrom(:member :ConceptType))

# Class: :IO (:IO)

SubClassOf(:IO :Program)
SubClassOf(:IO ObjectSomeValuesFrom(:member :ConceptInput_Output))

# Class: :Operator (:Operator)

SubClassOf(:Operator :Program)
SubClassOf(:Operator ObjectSomeValuesFrom(:member :ConceptOperator))

# Class: :OrderedCollection (Ordered Collection)

AnnotationAssertion(:definition :OrderedCollection "An ordered collection of concepts, where both the grouping and the ordering are meaningful."@en)
AnnotationAssertion(:scopeNote :OrderedCollection "Ordered collections can be used where you would like a set of concepts to be displayed in a specific order, and optionally under a 'node label'."@en)
AnnotationAssertion(rdfs:isDefinedBy :OrderedCollection <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :OrderedCollection "Ordered Collection"@en)
SubClassOf(:OrderedCollection :Collection)

# Class: :Program (:Program)

SubClassOf(:Program :Computer)
SubClassOf(:Program ObjectSomeValuesFrom(:member :ConceptProgram))

# Class: :Programming (:Programming)

SubClassOf(:Programming :Program)
SubClassOf(:Programming ObjectSomeValuesFrom(:member :ConceptProgramming))

# Class: :ProgrammingLanguage (:ProgrammingLanguage)

SubClassOf(:ProgrammingLanguage :Programming)

# Class: :ProgrammingStrategy (:ProgrammingStrategy)

SubClassOf(:ProgrammingStrategy :Programming)
SubClassOf(:ProgrammingStrategy ObjectSomeValuesFrom(:member :ConceptProgramming_Strategy))

# Class: :RelationalOperator (:RelationalOperator)

SubClassOf(:RelationalOperator :Operator)
SubClassOf(:RelationalOperator ObjectSomeValuesFrom(:member :ConceptRelational_Operator))

# Class: :SchemeDouble (:SchemeDouble)

SubClassOf(:SchemeDouble :SchemesType)
SubClassOf(:SchemeDouble ObjectSomeValuesFrom(:member :ConceptDouble))

# Class: :SchemeFloat (:SchemeFloat)

SubClassOf(:SchemeFloat :SchemesType)

# Class: :SchemeInteger (:SchemeInteger)

SubClassOf(:SchemeInteger :SchemesType)
SubClassOf(:SchemeInteger ObjectSomeValuesFrom(:member :ConceptInteger))

# Class: :Schemes (Concept Scheme)

AnnotationAssertion(:definition :Schemes "A set of concepts, optionally including statements about semantic relationships between those concepts."@en)
AnnotationAssertion(:example :Schemes "Thesauri, classification schemes, subject heading lists, taxonomies, 'folksonomies', and other types of controlled vocabulary are all examples of concept schemes. Concept schemes are also embedded in glossaries and terminologies."@en)
AnnotationAssertion(:scopeNote :Schemes "A concept scheme may be defined to include concepts from different sources."@en)
AnnotationAssertion(rdfs:isDefinedBy :Schemes <http://www.w3.org/2004/02/skos/core>)
AnnotationAssertion(rdfs:label :Schemes "Concept Scheme"@en)
SubClassOf(:Schemes :FunctionType)

# Class: :SchemesType (:SchemesType)

EquivalentClasses(:SchemesType :VariableType)
SubClassOf(:SchemesType :Schemes)
SubClassOf(:SchemesType ObjectSomeValuesFrom(:hasTopConcept :ConceptType))
SubClassOf(:SchemesType ObjectSomeValuesFrom(:member :ConceptFloat))

# Class: :SelectionStatement (:SelectionStatement)

SubClassOf(:SelectionStatement :Statement)
SubClassOf(:SelectionStatement ObjectSomeValuesFrom(:member :ConceptSelection_Statement))

# Class: :Statement (:Statement)

SubClassOf(:Statement :Program)
SubClassOf(:Statement ObjectSomeValuesFrom(:member :ConceptStatement))

# Class: :Variable (:Variable)

SubClassOf(:Variable :Program)
SubClassOf(:Variable ObjectSomeValuesFrom(:member :ConceptVariable))

# Class: :VariableAssignment (:VariableAssignment)

SubClassOf(:VariableAssignment :Variable)
SubClassOf(:VariableAssignment ObjectSomeValuesFrom(:member :ConceptAssignment))

# Class: :VariableDeclaration (:VariableDeclaration)

SubClassOf(:VariableDeclaration :Variable)
SubClassOf(:VariableDeclaration ObjectSomeValuesFrom(:member :ConceptDeclaration))

# Class: :VariableInitialisation (:VariableInitialisation)

SubClassOf(:VariableInitialisation :Variable)
SubClassOf(:VariableInitialisation ObjectSomeValuesFrom(:member :ConceptInitialisation))

# Class: :VariableMemory (:VariableMemory)

SubClassOf(:VariableMemory :Variable)
SubClassOf(:VariableMemory ObjectSomeValuesFrom(:member :ConceptMemory))

# Class: :VariableType (:VariableType)

SubClassOf(:VariableType :Variable)
SubClassOf(:VariableType ObjectSomeValuesFrom(:member :ConceptType))

# Class: :VariableValue (:VariableValue)

SubClassOf(:VariableValue :Variable)

# Class: <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1511> (<http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1511>)

SubClassOf(<http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1511> :Collection)


############################
#   Named Individuals
############################

# Individual: <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1> (LO1Week1)

AnnotationAssertion(:LOId <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1> "1"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1> "1,programming languages,linux,operating systems,education,software,software systems"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1> "2,web page,learning,computer science,engineering,software,software engineering,software reengineering,mechatronics,data stream,programming languages"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1> "3,email,email messages,comp,computer systems,turing machines"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1> "4,text document,programming languages,lan,c programs,textual data"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1> "5,c programs,programming languages,concurrent program,combinatorial problems,combinatorial optimization"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1> "6,c programs,sms messages,concurrent program,combinatorial problems,combinatorial optimization"^^xsd:string)
AnnotationAssertion(rdfs:label <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1> "LO1Week1"^^xsd:string)
ClassAssertion(:ConceptC_Program <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#1>)

# Individual: <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> (LOWeek2)

AnnotationAssertion(:LOId <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "2"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "10,social sciences,computer science,engineering,education,computer science education"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "11,social sciences,computer science,engineering,education,computer science education"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "12,social sciences,computer science,engineering,education,computer science education"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "13,social sciences,computer science,engineering,education,computer science education"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "14,social sciences,computer science,engineering,system requirements,quality requirements,functional requirement,education,computer science education,applied mathematics,engineering design"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "15,social sciences,computer science,engineering,education,computer science education,applied mathematics,engineering design"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "16,social sciences,computer science,engineering,education,computer science education"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "17,social sciences,computer science,engineering,education,computer science education"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "18,social sciences,computer science,engineering,education,computer science education"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "19,social sciences,computer science,engineering,education,computer science education"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "20,social sciences,computer science,engineering,education,computer science education"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "7,social sciences,computer science,engineering,education,computer science education"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "8,social sciences,computer science,engineering,education,computer science education"^^xsd:string)
AnnotationAssertion(:csoConcept <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "9,social sciences,computer science,engineering,education,computer science education"^^xsd:string)
AnnotationAssertion(rdfs:label <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2> "LOWeek2"^^xsd:string)
ClassAssertion(:ConceptType <http://www.skosknowledge.com/ontologies/skos_knowledge.owl#2>)


DisjointClasses(:SchemeDouble :SchemeFloat :SchemeInteger)
)